<%+header%>
<style>

</style>

<div style="width: 100%; height: 100%; margin: 0; position:relative">
    <canvas id="speedTest">
    Your browser does not support the canvas element.
    </canvas>
</div>

<button class="btn large-btn" onclick="startSpeedTest()">Start speed test</button>

<script type="text/javascript">
    window.setInterval(readJson,100);

    var maxValue = 1000;
    var canvas = document.getElementById("speedTest");
    var ctx = canvas.getContext("2d");
    var minAngle = Math.PI * 1.5;
    var r = canvas.width/2 - 20;
    
    function startSpeedTest(){
        var xhr = new XMLHttpRequest();
        xhr.open("GET", '<%=build_url("admin/services/speed_test/start")%>');
        xhr.send();

        xhr.onreadystatechange = function() {
            if(this.readyState === 4 && this.status === 200) {
                console.log("Success");
            }
        };
            
    }

    function readJson(){
        var directory = '<%=build_url("admin/services/speed_test/getJSON")%>';
        var xobj = new XMLHttpRequest();
        xobj.open('GET', directory, true); // Replace 'my_data' with the path to your file
        xobj.onreadystatechange = function () {
            if (xobj.readyState == 4 && xobj.status == "200") {
                // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode
                var data = xobj.responseText;
                var json = JSON.parse(data);
                console.log(json);
                onDraw(convertToMbps(json.avgUploadSpeed));
            }
        };
        xobj.send(null);  
    }

    function convertToMbps(value){
        return value/125000;
    }

    function onDraw(val = 0){
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        var angle = Math.PI;
        if(val < maxValue){
            angle = Math.PI*val/maxValue;
        }
        canvas.style.width ='100%';
        canvas.style.height='100%';
        canvas.width  = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;
        r = canvas.width/2 - 20;
        // canvas.width = window.innerWidth;
        // canvas.height = window.innerHeight;
        drawGauge(angle);
        drawPointer(angle);
        drawGaugeSpeeds();
        drawSpeed(val);
    }

    function drawGauge(angle){
        angle = Math.PI + angle;
        ctx.lineWidth = 20;
        ctx.strokeStyle = "#0054A6";
        
        ctx.beginPath();
        ctx.arc(canvas.width/2, canvas.height/2, r, angle, 0);
        ctx.globalAlpha = 0.2;
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(canvas.width/2, canvas.height/2, r, Math.PI, angle);
        ctx.globalAlpha = 1;
        ctx.stroke();
    }

    function drawPointer(angle){
        angle = minAngle - angle;
        ctx.beginPath();
        ctx.globalAlpha = 1;
        ctx.moveTo(canvas.width/2, canvas.height/2);
        var coord = getCoordinates(angle);
        ctx.lineTo(coord[0], coord[1]);
        ctx.stroke();
    }

    function drawGaugeSpeeds(){
        for(i = 0; i < 11; i++){
            ctx.font = "30px Arial";
            var angle = Math.PI * 1.5 - Math.PI*i/10;
            var coord = getCoordinates(angle);
            ctx.textAlign = "center";
            ctx.fillText(i*100,coord[0],coord[1]);
        }   
    }
    function drawSpeed(value){
        ctx.font = "40px Arial";
        ctx.textAlign = "center";
        ctx.fillText(value,canvas.width/2,canvas.height/2);
    }

    function getCoordinates(angle){
        return[canvas.width/2 + r * Math.sin(angle), canvas.height/2 + r * Math.cos(angle)]
    }
    
    onDraw();
    readJson();
</script>                                           
<%+footer%>
