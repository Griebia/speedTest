<%+header%>
<style>
    nav ul{height:200px; width:18%;}
    nav ul{overflow:hidden; overflow-y:scroll;}
</style>


<div style="text-align: center;">
    <h2 id="text">Speed Test</h2>
</div>>
<div style="width: 100%; height: 50%; margin: 0; position:relative">
    <canvas id="speedTest">
    Your browser does not support the canvas element.
    </canvas>
</div>
<div style="text-align: center; padding: 10px;">
    <button class="btn large-btn" onclick="startSpeedTest()">Start speed test</button>
</div>
<div style="text-align: center; padding: 10px;">
    <button class="btn large-btn" onclick="startSpeedTest()">Change server</button>
</div>

<!-- Modal -->
<div class="find-servers">
    <input id="search" type="text" onkeyup="search()">
    <nav><ul id="serverlist"></ul></nav>
</div>

<script type="text/javascript">
    // window.setInterval(readJson,100);

    var maxValue = 1000;
    var canvas = document.getElementById("speedTest");
    var ctx = canvas.getContext("2d");
    var minAngle = Math.PI * 1.5;
    var r = canvas.width/2 - 20;
    
    function startSpeedTest(){
        var xhr = new XMLHttpRequest();
        xhr.open("GET", '<%=build_url("admin/services/speed_test/start")%>');
        xhr.send();

        xhr.onreadystatechange = function() {
            if(this.readyState === 4 && this.status === 200) {
                console.log("Success");
            }
        };      
    }

    function readJson(){
        var directory = '<%=build_url("admin/services/speed_test/getJSON")%>';
        var xobj = new XMLHttpRequest();
        xobj.open('GET', directory, true); // Replace 'my_data' with the path to your file
        xobj.onreadystatechange = function () {
            if (xobj.readyState == 4 && xobj.status == "200") {
                // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode
                var data = xobj.responseText;
                var json = JSON.parse(data);
                onDraw(convertToMbps(json.avgUploadSpeed));
            }
        };
        xobj.send(null);  
    }

    function convertToMbps(value){
        return value/125000;
    }

    function onDraw(val = 0){
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        var angle = Math.PI;
        if(val < maxValue){
            angle = Math.PI*val/maxValue;
        }
        canvas.style.width ='100%';
        canvas.style.height='100%';
        canvas.width  = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;
        r = canvas.width/2 - 20;
        // canvas.width = window.innerWidth;
        // canvas.height = window.innerHeight;
        drawGauge(angle);
        drawPointer(angle);
        drawGaugeSpeeds();
        drawSpeed(val);
    }

    function drawGauge(angle){
        angle = Math.PI + angle;
        ctx.lineWidth = 20;
        ctx.strokeStyle = "#0054A6";
        
        ctx.beginPath();
        ctx.arc(canvas.width/2, canvas.height, r, angle, 0);
        ctx.globalAlpha = 0.2;
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(canvas.width/2, canvas.height, r, Math.PI, angle);
        ctx.globalAlpha = 1;
        ctx.stroke();
    }

    function drawPointer(angle){
        angle = minAngle - angle;
        ctx.beginPath();
        ctx.globalAlpha = 1;
        ctx.moveTo(canvas.width/2,canvas.height);
        var coord = getCoordinates(angle);
        ctx.lineTo(coord[0], coord[1]);
        ctx.stroke();
    }

    function drawGaugeSpeeds(){
        for(i = 0; i < 11; i++){
            ctx.font = "30px Arial";
            var angle = Math.PI * 1.5 - Math.PI*i/10;
            var coord = getCoordinates(angle);
            ctx.textAlign = "center";
            ctx.fillText(i*100,coord[0],coord[1]);
        }   
    }
    function drawSpeed(value){
        ctx.font = "40px Arial";
        ctx.textAlign = "center";
        ctx.fillText(value,canvas.width/2, canvas.height);
    }

    function getCoordinates(angle){
        return[canvas.width/2 + r * Math.sin(angle), canvas.height + r * Math.cos(angle)]
    }
    
    function getServersList(){
        var xhr = new XMLHttpRequest();
        xhr.open("GET", 'https://www.c.speedtest.net/speedtest-servers-static.php', true);
        xhr.withCredentials = true;
        xhr.send();

        xhr.onreadystatechange = function() {
            if(this.readyState === 4 && this.status === 200) {
                console.log(xhr.responseText);
            }
            console.log("fail");
        };
    }

    function addItem(name){
        var ul = document.getElementById("serverlist");
        var li = document.createElement("li");
        li.setAttribute('id',name);
        li.appendChild(document.createTextNode(name));
        ul.appendChild(li);
    }

    function writeToList(){
        getServerList(function(response){
            let parser = new DOMParser();
            var xmlDoc = parser.parseFromString(response,"application/xml");
            for(i = 0; i < xmlDoc.getElementsByTagName('server').length; i++){ 
                console.log(i);
                var name = xmlDoc.getElementsByTagName('server')[i].getAttribute('name');
                addItem(name);
            }
            console.log(xmlDoc.getElementsByTagName('server').length);       
            
        });
    }

    function search() {
        var input, filter, ul, li, a, i, txtValue;
        input = document.getElementById("search");
        filter = input.value.toUpperCase();
        ul = document.getElementById("serverlist");
        li = ul.getElementsByTagName("li");
        for (i = 0; i < li.length; i++) {
            txtValue = li[i].innerHTML;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                li[i].style.display = "";
            } else {
                li[i].style.display = "none";
            }
        }
    }   

    function getServerList(callback){
        var xhr = new XMLHttpRequest();
        xhr.open("GET", '<%=build_url("admin/services/speed_test/getServers")%>', true);
        xhr.withCredentials = true;
        xhr.send();

        xhr.onreadystatechange = function() {
            if(this.readyState === 4 && this.status === 200) {
                callback(xhr.responseText);
            }
        };
    }
    
    writeToList();
    onDraw();
    readJson();
</script>                                           
<%+footer%>
